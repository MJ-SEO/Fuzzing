        -:    0:Source:cgi_test.c
        -:    0:Graph:cgi_test.gcno
        -:    0:Data:cgi_test.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <string.h>
        -:    3:#include <stdio.h>
        -:    4:
        -:    5:int hex_values[256];
        -:    6:
        1:    7:void init_hex_values() {
      257:    8:	for (int i = 0; i < sizeof(hex_values) / sizeof(int); i++) {
      256:    9:		hex_values[i] = -1;
        -:   10:	}
        1:   11:	hex_values['0'] = 0; hex_values['1'] = 1; hex_values['2'] = 2; hex_values['3'] = 3;
        1:   12:	hex_values['4'] = 4; hex_values['5'] = 5; hex_values['6'] = 6; hex_values['7'] = 7;
        1:   13:	hex_values['8'] = 8; hex_values['9'] = 9;
        -:   14:
        1:   15:	hex_values['a'] = 10; hex_values['b'] = 11; hex_values['c'] = 12; hex_values['d'] = 13;
        1:   16:	hex_values['e'] = 14; hex_values['f'] = 15;
        -:   17:
        1:   18:	hex_values['A'] = 10; hex_values['B'] = 11; hex_values['C'] = 12; hex_values['D'] = 13;
        1:   19:	hex_values['E'] = 14; hex_values['F'] = 15;
        1:   20:}
        -:   21:
        1:   22:int cgi_decode(char *s, char *t) {
       33:   23:	while (*s != '\0') {
       31:   24:		if (*s == '+')
        3:   25:			*t++ = ' ';
       28:   26:		else if (*s == '%') {
        1:   27:			int digit_high = *++s;
        1:   28:			int digit_low = *++s;
        1:   29:			if (hex_values[digit_high] >= 0 && hex_values[digit_low] >= 0) {
        1:   30:				*t++ = hex_values[digit_high] * 16 + hex_values[digit_low];
        -:   31:			}
        -:   32:			else
    #####:   33:				return -1;
        -:   34:		}
        -:   35:		else
       27:   36:			*t++ = *s;
       31:   37:		s++;
        -:   38:	}
        1:   39:	*t = '\0';
        1:   40:	return 0;
        -:   41:}
        -:   42:
        1:   43:int main(int argc, char *argv[]) {
        1:   44:	init_hex_values();
        -:   45:
        1:   46:	if (argc >= 2) {
        1:   47:		char *s = argv[1];
        1:   48:		char *t = malloc(strlen(s) + 1); /* output is at most as long as input */
        1:   49:		int ret = cgi_decode(s, t);
        1:   50:		printf("%s\n", t);
        1:   51:		return ret;
        -:   52:	}
        -:   53:	else
        -:   54:	{
    #####:   55:		printf("cgi_decode: usage: cgi_decode STRING\n");
    #####:   56:		return 1;
        -:   57:	}
        -:   58:}
