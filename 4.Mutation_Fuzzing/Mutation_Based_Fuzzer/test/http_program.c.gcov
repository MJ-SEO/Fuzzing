        -:    0:Source:../lib/http_program.c
        -:    0:Graph:http_program.gcno
        -:    0:Data:http_program.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "../include/http_program.h"
        -:    2:
        -:    3:#define DEBUG
        -:    4:
        -:    5:url_t*
function url_parser called 2 returned 100% blocks executed 100%
        2:    6:url_parser(char* target_url){
        2:    7:	url_t* url = (url_t*)malloc(sizeof(url_t) * 1);
        -:    8:	
        2:    9:	url->url_status = sscanf(target_url, "%10[^:]%*[^a-z|^A-Z]%50[^/]%150[^?]?%30[^#]#%s", url->schema, url->netloc, url->path, url->query, url->fragment);
        -:   10:
        2:   11:	return url;
        -:   12:}
        -:   13:
        -:   14:int 
function http_program called 2 returned 100% blocks executed 73%
        2:   15:http_program(char* target_url){
        2:   16:	url_t* result = url_parser(target_url);
call    0 returned 2
        -:   17:
        -:   18:#ifdef DEBUG
        2:   19:	printf("[info] Schemas : '%s'\n", result->schema);
call    0 returned 2
        2:   20:	printf("[info] Netloc: '%s'\n", result->netloc);
call    0 returned 2
        2:   21:	printf("[info] Path : '%s'\n", result->path);
call    0 returned 2
        2:   22:	printf("[info] Query : '%s'\n", result->query);
call    0 returned 2
        2:   23:	printf("[info] Fragment : '%s'\n", result->fragment);
call    0 returned 2
        -:   24:#endif
        -:   25:	
        2:   26:	if((strcmp(result->schema, "http") != 0) && (strcmp(result->schema, "https") != 0)){
branch  0 taken 2 (fallthrough)
branch  1 taken 0
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2:   27:		perror("Schemae must be 'http' or 'https'");
call    0 returned 2
        2:   28:		return 1;
        -:   29:	}
        -:   30:
    #####:   31:	if(strlen(result->netloc) < 1){
branch  0 never executed
branch  1 never executed
    #####:   32:		perror("Host must be non-empty");
call    0 never executed
    #####:   33:		return 2;
        -:   34:	}
        -:   35:
    #####:   36:	free(result);
    #####:   37:	return 0;
        -:   38:}
        -:   39:
        -:   40:int
function is_valid_url called 1 returned 100% blocks executed 83%
        1:   41:is_valid_url(char* target_url){
        1:   42:	if(http_program(target_url) != 0){
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   43:		perror("Is_valid_url: Invalid URL Format"); 
call    0 returned 1
        1:   44:		return 1;
        -:   45:	}
    #####:   46:	return 0;
        -:   47:}
        -:   48:
        -:   49:int
function main called 1 returned 100% blocks executed 88%
        1:   50:main(){
        1:   51:	char* url = (char*)malloc(sizeof(char)* 1024);
        1:   52:	scanf("%s", url);
call    0 returned 1
        1:   53:	printf("[DEBUG] Received URL: %s\n", url);
call    0 returned 1
        1:   54:	http_program(url);
call    0 returned 1
        1:   55:	if(is_valid_url(url) == 1){
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   56:		free(url);
        1:   57:		return 1;
        -:   58:	}	
    #####:   59:	free(url);
    #####:   60:	return 0;
        -:   61:}
